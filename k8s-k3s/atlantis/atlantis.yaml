apiVersion: v1
kind: Namespace
metadata:
  name: atlantis  # 这里指定命名空间的名称
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atlantis
  namespace: atlantis
  labels:
    app.kubernetes.io/name: atlantis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: atlantis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: atlantis
    spec:
      containers:
      - name: atlantis
        image: registry.cn-shanghai.aliyuncs.com/nsmi/atlantis:v0.30.0-alpine # 1. Replace <VERSION> with the most recent release.
        env:
        - name: ATLANTIS_REPO_ALLOWLIST
          value: dev.azure.com/MT-DBS/Enterprise Landing Zone/* # 2. Replace this with your own repo allowlist.

        # ### GitHub Config ###
        # - name: ATLANTIS_GH_USER
        #   value: <YOUR_GITHUB_USER> # 3i. If you're using GitHub replace <YOUR_GITHUB_USER> with the username of your Atlantis GitHub user without the `@`.
        # - name: ATLANTIS_GH_TOKEN
        #   valueFrom:
        #     secretKeyRef:
        #       name: atlantis-vcs
        #       key: token
        # - name: ATLANTIS_GH_WEBHOOK_SECRET
        #   valueFrom:
        #     secretKeyRef:
        #       name: atlantis-vcs
        #       key: webhook-secret
        # ### End GitHub Config ###

        # ### GitLab Config ###
        # - name: ATLANTIS_GITLAB_USER
        #   value: <YOUR_GITLAB_USER> # 4i. If you're using GitLab replace <YOUR_GITLAB_USER> with the username of your Atlantis GitLab user without the `@`.
        # - name: ATLANTIS_GITLAB_TOKEN
        #   valueFrom:
        #     secretKeyRef:
        #       name: atlantis-vcs
        #       key: token
        # - name: ATLANTIS_GITLAB_WEBHOOK_SECRET
        #   valueFrom:
        #     secretKeyRef:
        #       name: atlantis-vcs
        #       key: webhook-secret
        # ### End GitLab Config ###

        # ### Gitea Config ###
        # - name: ATLANTIS_GITEA_USER
        #   value: <YOUR_GITEA_USER> # 4i. If you're using Gitea replace <YOUR_GITEA_USER> with the username of your Atlantis Gitea user without the `@`.
        # - name: ATLANTIS_GITEA_TOKEN
        #   valueFrom:
        #     secretKeyRef:
        #       name: atlantis-vcs
        #       key: token
        # - name: ATLANTIS_GITEA_WEBHOOK_SECRET
        #   valueFrom:
        #     secretKeyRef:
        #       name: atlantis-vcs
        #       key: webhook-secret
        # ### End Gitea Config ###

        # ### Bitbucket Config ###
        # - name: ATLANTIS_BITBUCKET_USER
        #   value: <YOUR_BITBUCKET_USER> # 5i. If you're using Bitbucket replace <YOUR_BITBUCKET_USER> with the username of your Atlantis Bitbucket user without the `@`.
        # - name: ATLANTIS_BITBUCKET_TOKEN
        #   valueFrom:
        #     secretKeyRef:
        #       name: atlantis-vcs
        #       key: token
        # ### End Bitbucket Config ###

        ### Azure DevOps Config ###
        - name: ATLANTIS_AZUREDEVOPS_USER
          value: ch00-atlsELZDev@mt.com # 6i. If you're using Azure DevOps replace <YOUR_AZUREDEVOPS_USER> with the username of your Atlantis Azure DevOps user without the `@`.
        - name: ATLANTIS_AZUREDEVOPS_TOKEN
          valueFrom:
            secretKeyRef:
              name: atlantis-vcs
              key: token
        - name: ATLANTIS_AZUREDEVOPS_WEBHOOK_USER
          valueFrom:
            secretKeyRef:
              name: atlantis-vcs
              key: ado-webhook-user
        - name: ATLANTIS_AZUREDEVOPS_WEBHOOK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: atlantis-vcs
              key: ado-webhook-password
        ### End Azure DevOps Config ###

        - name: ATLANTIS_PORT
          value: "4141" # Kubernetes sets an ATLANTIS_PORT variable so we need to override.
        ports:
        - name: atlantis
          containerPort: 4141
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 100m
        livenessProbe:
          # We only need to check every 60s since Atlantis is not a
          # high-throughput service.
          periodSeconds: 600
          httpGet:
            path: /healthz
            port: 4141
            # If using https, change this to HTTPS
            scheme: HTTP
        readinessProbe:
          periodSeconds: 600
          httpGet:
            path: /healthz
            port: 4141
            # If using https, change this to HTTPS
            scheme: HTTP
---
# apiVersion: v1
# kind: Service
# metadata:
#   name: atlantis
# spec:
#   type: ClusterIP
#   ports:
#   - name: atlantis
#     port: 80
#     targetPort: 4141
#   selector:
#     app.kubernetes.io/name: atlantis
---
apiVersion: v1
kind: Service
metadata:
  name: atlantis
  namespace: atlantis
spec:
  type: NodePort
  ports:
  - name: atlantis
    port: 4141
    targetPort: 4141
    nodePort: 30001
  selector:
    app.kubernetes.io/name: atlantis